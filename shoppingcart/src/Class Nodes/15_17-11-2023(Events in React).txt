17-11-2023:(Events in React)
Summary
- Events
- What is Event?
- Which design pattern event uses?
- Delegate Mechanism
- SyntheticEvent
- EventHandler
- Inline, Embedded
- EventArgs


                             Event Propagation
- It is a mechanism followed for events configured for element with parent and child hierarchy.
- The child element event triggers and continue the propagation to its parent.
- This leads to the execution of all events configured for child and parent level hierarchy.
- You can use "stopPropagation()" of event to prevent execution of parent events automatically.

Syntax:
    function handleButtonClick(e)
    {
      e.stopPropagation();
    }

Ex:
event-binding.jsx

import { useState } from "react";

export function EventBinding(){

    function handleNavClick(){
        alert("Navbar Clicked");
    }
    function handleHomeClick(e){
        alert("Home Button Clicked");
        e.stopPropagation();
    }

    return(
        <div className="container-fluid">
            <nav onClick={handleNavClick} className="bg-dark text-white m-4 p-4">
                <h3>Navbar</h3>
                <button onClick={handleHomeClick} className="btn btn-light">Home</button>
            </nav>
        </div>
    )
}

                            Prevent Default
- HTML form provides generic buttons
    a) submit
    b) reset

    <button type="submit">        => It can submit form data to server
    <button type="reset">        => It can reset the form data
    <button>                    => default is submit

- HTML form have non-generic button
    a) button

    <button type="button">        => without any pre-defined functionality.

- Generic elements have pre-defined functionality, which firesup after the custom functions that you defined for element.

- You can prevent the default functionality of any element by using the method
        "preventDefault()"

Syntax:
    function handleSubmitClick(e)
    {
        e.preventDefault();
    }

Ex:
import { useState } from "react";

export function EventBinding(){

    function handleSubmitClick(e){
        alert("Form will submit its data to Server - API");
        e.preventDefault();
    }

    return(
        <div className="container-fluid">
            <h2>Register</h2>
            <form onSubmit={handleSubmitClick}>
               User Name <input type="text" name="UserName" /> <button type="submit">Submit</button>
            </form>
        </div>
    )
}

FAQ's:
1. Can we have multiple forms in a component?
A. Yes.

2. Can we configure a form within another form? Can we have nested forms?
A. No.

3. Can a form have multiple submit buttons?      => .NET React
A. Yes.

Ex:
import { useState } from "react";

export function EventBinding(){

    function handleSubmit(e){
        e.preventDefault();
        for(var i=1; i<e.target.length; i++){
            console.log(e.target[i].name);
        }
    }

    return(
        <div className="container-fluid">
            <h2>Register</h2>
            <form onSubmit={handleSubmit}>
                <input type="text" name="UserName" />
                <button name="Insert">Insert</button>
                <button name="Update">Update</button>
                <button name="Delete">Delete</button>
            </form>
        </div>
    )
}

 console.log(document.getElementsByTagName("button"));


4. How to handle onload action in React?
A. React will not have load event for component.
    React component have "Mount" event.
    Mount event is defined for handling actions when component is mounted on to page.
    Function component mount event is defined by using a Hook called "useEffect".

Syntax:
        useEffect(()=>{ }, [dependencies]);

Ex:
import { useState, useEffect } from "react";

export function EventBinding(){

    const [userName, setUserName] = useState('');

    useEffect(()=>{
        setUserName('John');
    },[]);

    return(
        <div className="container-fluid">
            <h2>Register</h2>
            <p>Hello ! {userName}</p>
        </div>
   
    )
}
                        Various Synthetic Events
- Keyboard Events
- Mouse Events
- Button Events
- Clipboard Events
- Timer Events
- Touch Events
- Form Events  
- Element State Events etc.