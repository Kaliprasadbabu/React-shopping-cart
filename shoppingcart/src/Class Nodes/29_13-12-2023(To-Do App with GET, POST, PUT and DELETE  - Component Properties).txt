13-12-2023(To-Do App with GET, POST, PUT and DELETE  - Component Properties)

Complete To-DO App
                    -----------------------------

api.js

var express = require("express");
var mongoClient = require("mongodb").MongoClient;
var cors = require("cors");


var connectionString = "mongodb://127.0.0.1:27017";

var app = express();
app.use(cors());
app.use(express.urlencoded({extended:true}));
app.use(express.json());

app.get("/", (req, res)=>{
   res.send("<h1>To DO - API</h1>");  
});

app.get("/appointments", (req, res)=> {
    mongoClient.connect(connectionString).then(clientObject=>{
         var database = clientObject.db("todo");
         database.collection("appointments").find({}).toArray().then(documents=>{
             res.send(documents);
             res.end();
         })
    })
});

app.get("/appointments/:id", (req, res)=>{
     var id = parseInt(req.params.id);
     mongoClient.connect(connectionString).then(clientObject=>{
          var database = clientObject.db("todo");
          database.collection("appointments").find({Id:id}).toArray().then(documents=>{
              res.send(documents);
              res.end();
          })
     })
});

app.post("/addtask",(req, res)=>{
      var task = {
          Id: parseInt(req.body.Id),
          Title: req.body.Title,
          Date: new Date(req.body.Date),
          Description: req.body.Description
      };
      mongoClient.connect(connectionString).then(clientObject=>{
          var database = clientObject.db("todo");
          database.collection("appointments").insertOne(task).then(()=>{
             console.log(`Task Added Successfully..`);
             res.end();
          })
      })
});

app.put("/edittask/:id",(req, res)=>{
   var id = parseInt(req.params.id);
   mongoClient.connect(connectionString).then(clientObject=>{
        var database = clientObject.db("todo");
        database.collection("appointments").updateOne({Id:id},{$set:{Id:parseInt(req.body.Id), Title: req.body.Title, Date: new Date(req.body.Date), Description: req.body.Description}}).then(()=>{
            console.log("Task Updated Successfully..");
            res.end();
        })
   })
});

app.delete("/deletetask/:id", (req, res)=>{
    var id = parseInt(req.params.id);
    mongoClient.connect(connectionString).then(clientObject=>{
        var database = clientObject.db("todo");
        database.collection("appointments").deleteOne({Id:id}).then(()=>{
            console.log("Task Deleted Successfully..");
            res.end();
        })
    })
});

app.listen(4000);
console.log(`Server Started : http://127.0.0.1:4000`);


todo.jsx
import axios from "axios";
import { useEffect, useState } from "react";
import { useFormik } from "formik";

export function ToDoApp()
{
    const [appointments, setAppointments] = useState([]);
    const [toggleAdd, setToggleAdd] = useState({display:'block'});
    const [toggleEdit, setToggleEdit] = useState({display:'none'});
    const [editAppoint, setEditAppointment] = useState([{Id:0, Title:'', Date:'', Description:''}]);

    const formik = useFormik({

        initialValues : {
            Id: appointments.length + 1,
            Title: '',
            Description: '',
            Date: new Date()
        },

        onSubmit: (appointment) => {
            axios.post('http://127.0.0.1:4000/addtask&#39;, appointment);
            alert('Appointment Added Successfully..');
            window.location.reload();
        }

    })

    const  editFormik = useFormik({
        initialValues : {
            Id: editAppoint[0].Id,
            Title: editAppoint[0].Title,
            Date: `${editAppoint[0].Date.slice(0,editAppoint[0].Date.indexOf("T"))}`,
            Description: editAppoint[0].Description
        },
        enableReinitialize: true,
        onSubmit : (appointment) => {
            axios.put(`http://127.0.0.1:4000/edittask/${editAppoint[0].Id}`, appointment);
            alert('Appointment Modified Successfully..');
            window.location.reload();
        }
    })

    function LoadAppointments(){
        axios.get('http://127.0.0.1:4000/appointments&#39;)
        .then(response=> {
            setAppointments(response.data);
        })
    }

    useEffect(()=>{
        LoadAppointments();
    },[]);

    function handleDeleteClick(e){
        var id = parseInt(e.target.value);
        var flag = window.confirm(`Are you sure\n Want to Delete?`);
        if(flag===true) {
            axios.delete(`http://127.0.0.1:4000/deletetask/${id}`);
            window.location.reload();
        }
    }

    function handleEditClick(id){
        setToggleAdd({display:'none'});
        setToggleEdit({display:'block'});
        axios.get(`http://127.0.0.1:4000/appointments/${id}`)
        .then(response=>{
            setEditAppointment(response.data);
            console.log(response.data);
        })


    }
    function handleCancelClick(){
        setToggleAdd({display:'block'});
        setToggleEdit({display:'none'});
    }


    return(
        <div className="container-fluid">
            <h1 className="text-center">To Do App</h1>
            <header>
                <div aria-label="AddAppointment" style={toggleAdd} >
                    <label className="form-label fw-bold">Add New Appointment</label>
                    <div>
                        <form onSubmit={formik.handleSubmit} className="w-50">
                         <div className="d-flex">
                         <input type="hidden" name="Id" value={formik.values.Id} className="form-control" onChange={formik.handleChange} />
                         <input type="text" name="Title" onChange={formik.handleChange} className="form-control"  placeholder="Title"/>
                         <input type="date" name="Date" onChange={formik.handleChange} className="form-control" />
                         </div>
                         <div className="mt-2">
                            <label className="form-label fw-bold">Description</label>
                            <textarea name="Description" onChange={formik.handleChange} className="form-control">

                            </textarea>
                            <div className="mt-3">
                                <button className="btn btn-primary">Add</button>
                            </div>
                         </div>
                       
                        </form>
                    </div>
                </div>


                <div aria-label="EditAppointment" style={toggleEdit} >
                    <label className="form-label fw-bold">Edit Appointment</label>
                    <div>
                        <form onSubmit={editFormik.handleSubmit} className="w-50">
                         <div className="d-flex">
                         <input type="number" name="Id" value={editFormik.values.Id} className="form-control" onChange={editFormik.handleChange} />
                         <input type="text" name="Title"  value={editFormik.values.Title} onChange={editFormik.handleChange} className="form-control"  placeholder="Title"/>
                         <input type="date" name="Date"  value={editFormik.values.Date} onChange={editFormik.handleChange} className="form-control" />
                         </div>
                         <div className="mt-2">
                            <label className="form-label fw-bold">Description</label>
                            <textarea name="Description"  value={editFormik.values.Description} onChange={editFormik.handleChange} className="form-control">

                            </textarea>
                            <div className="mt-3">
                                <button className="btn btn-success">Save</button>
                                <button type="button" onClick={handleCancelClick} className="ms-2 btn btn-danger">Cancel</button>
                            </div>
                         </div>
                       
                        </form>
                    </div>
                </div>
            </header>
            <main className="mt-4">
                <div>
                    <label className="form-label fw-bold">Your Appointments</label>
                    <div className="d-flex flex-wrap">
                        {
                            appointments.map(appointment =>
                                 <div className="alert alert-dismissible alert-success m-2 w-25" key={appointment.Id}>
                                    <button className="btn btn-close" value={appointment.Id} onClick={handleDeleteClick}></button>
                                    <div className="h5 alert-title">{appointment.Title}</div>
                                    <p>{appointment.Description}</p>
                                    <span className="bi bi-calendar"></span> {appointment.Date.slice(0,appointment.Date.indexOf("T"))}
                                    <div className="mt-3">
                                        <button onClick={()=>{handleEditClick(appointment.Id)}} className="bi bi-pen-fill btn btn-warning"> Edit </button>
                                    </div>
                                 </div>
                                )
                        }
                    </div>
                </div>
            </main>
        </div>
    )
}

ToDo:
- Hide ID in edit and new forms.
- Auto generate ID in new appointment form.
- Set validation for form
        Title         : required, max 25 chars.
        Date        : required, must be above current date
        Description : required, max 150 chars
- Enable Save button in edit form only when any value is modified.
- Handle validation using Yup.

Summary
- Function Components
- Data Binding
- Style Binding
- Event Binding
- Class Binding
- State
- UseEffect
- API Interactions
    a) XMLHttpRequest, fetch
    b) jQuery Ajax
    c) Axios
- Forms
- Form Validations
- End to End integration  [ MERN Stack]
- To-Do App

                        Component Properties
- A component requires properties to modify according state and situation.
- You can create a reusable component, which can be customized according to the state and situation.
- Function component parameters are considered as its properties.

Syntax:
        function  Component(props)
        {
        }

- The component props is an object with key and value.

Syntax:
        props = {
            Key : value,
        }

- You can access the component using token syntax

        <Component> </Component>

- The props are passed in the token.

        <Component  property=value> </Component>

Ex:
1. Add a new folder
        component-library

2. Add a new component folder
        user-login

3. Add a new file
        user-login.jsx


export function UserLogin(props)
{
    return(
        <div className="container-fluid">
           
            <dl className={props.Theme}>
                 <h3>{props.Title}</h3>
                <dt>{props.UserLabel}</dt>
                <dd><input type={props.UserType} className="form-control" /></dd>
                <dt>{props.Verify}</dt>
                <dd><input type={props.VerifyType} className="form-control" /></dd>
                <button className={props.ButtonType}>Login</button>
            </dl>
           
        </div>
    )
}

4. Add a new component

        prop-demo.jsx

import { UserLogin } from "../../components-libary/userlogin";

export   function PropsDemo(){
    return(
        <div className="container-fluid">
            <h1>Shopping Home</h1>
            <UserLogin ButtonType="btn btn-light w-100" Theme="w-25 bg-primary text-white p-2" Title="User Login" UserLabel="Your Email" UserType="email" Verify="Confirmation Code" VerifyType="number" />
            <hr/>
            <UserLogin ButtonType="btn btn-warning w-100" Theme="w-25 bg-dark text-white p-2" Title="Admin Login" UserLabel="Mobile" UserType="text" Verify="Your OTP" VerifyType="number" />
        </div>
    )
}