06-11-2023:(React Components)
Creating a new React Application:

D:\>npx  create-react-app  appName


Notes Link : https://bit.ly/3tQlOWB

						 React Components

-  A component is a template with markup, styles and functionality.
- Markup is defined with HTML.
- Styles with CSS.
- Functionality with JavaScript or TypeScript.
- A component can be designed in React using 
	
		a) JavaScript Function
		b) JavaScript Class

Designing a Component with JavaScript Function:
1. A component function can be configured using 
		a) Expression
		b) Declaration

	const   Login  = function() {

	}
			(or)
	export function Login() {

	}
	
2. Every function component must return mark. It can't be void.

	export function Login() {
		return (
		    <markup> </markup>
		)
	}

3. Function uses JSX as language hence there are certain rules to follow for JSX.

	a) A function must return markup only as one fragment.

			return(
			        <h1>React</h1>				=> invalid
				<p> JavaScript Library </p>
			  )

			 return(
				<div>
				     <h1>React</h1>			=> valid
				     <p> JavaScript Library </p>
				</div>
			  )

			 return(
				<>
				  <h1> React </h1>				=> valid
				  <p> JavaScript Library </p>
				</>
			  )

			return(
			      <React.Fragment>
				    <h1> React </h1>			=> valid
				    <p> JavaScript Library </p>
			      </React.Fragment>
			    )

	b) It can't have void elements, every element must have and end token.


			return(
				<div>
				   <img src="pic.jpg">		=> invalid
				   <input type="text">		=> invalid
				</div>
				)

			 return(
				<div>
				  <img src="pic.jpg"> </img>		=> valid
				  <input type="text"> </input>
				</div>
				)
						(or)
			  return(
				<div>
				    <img src="pic.jpg" />
				    <input type="text" />			=> valid
				</div>
				)

		c) You can't use attributes for elements, only properties are allowed.

				<img src="" />			=> valid
				<img class="" />		=> invalid
				<img className="" />	=> valid

4. All components must be inside "src" folder.

5. Typically every component comprises 3 files in real-world application

	 		a) login.js
			b) login.css
			c) login.test.js
			    [login.spec.js]

   - ".js" file comprises of  markup and logic
   - ".css" file comprises of styles
   - ".test.js"  comprises of test cases.
   
Note: Markup and logic can be defined in ".jsx" or ".js"


Ex: Design a  register component  for React Application and Start with Register.

1. Go to "src" folder and add  a new folder by name "components"

2. Add "register" folder into components

3. Add following files into register folder

		register.jsx
		register.css

  register.jsx

import "./register.css";

export function Register()
{
    return(
       <>
         <main>
            <form>
                <h2>Register User</h2>
                <dl>
                    <dt>User Name</dt>
                    <dd><input type="text" /></dd>
                    <dt>Password</dt>
                    <dd><input type="password"></input></dd>
                    <dt>Age</dt>
                    <dd><input type="number" /></dd>
                    <dt>Email</dt>
                    <dd><input type="email" /></dd>
                </dl>
                <button className="btn-register">Register</button>
            </form>
         </main>
       </>
    )
}

register.css

form {
    border:1px solid gray;
    box-shadow: 2px 2px 2px black;
    padding: 20px;
    border-radius: 20px;
    width: 20%;
}
main {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
}
.btn-register {
    background-color: black;
    color:white;
    font-size: 20px;
    padding: 5px;
    width: 100%;
}
input {
    width: 100%;
    font-size: 20px;
}

4. Go to index.js  in src folder

import { Register } from './components/register/register';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <Register />
  </React.StrictMode>
);

							  Netflix