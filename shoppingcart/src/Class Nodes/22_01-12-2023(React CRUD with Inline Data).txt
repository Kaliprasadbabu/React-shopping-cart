01-12-2023(React CRUD with Inline Data)

Configuring State
- useState
- useReducer
- Redux Store

Ex: useState to keep api data and the data required across requests.

fakestore.jsx

import { useEffect, useState } from "react"
import axios from "axios";

export function Fakestore(){

    const [categories, setCategories] = useState([]);
    const [products, setProducts] = useState([{id:0, title:'', description:'', price:0, image:'', category:'', rating:{rate:0, count:0}}]);
    const [cartItems] = useState([]);
    const [cartCount, setCartCount] = useState(0);
    const [toggleTable, setToggleTable] = useState({display:'none'});

    function LoadCategories(){
        axios.get("http://fakestoreapi.com/products/categories&quot;)
        .then(response=> {
            response.data.unshift("all");
            setCategories(response.data);
        })
    }

    function LoadProducts(url){
        axios.get(url)
        .then(response=> {
            setProducts(response.data);
        })
    }

    useEffect(()=>{
        LoadCategories();
        LoadProducts("http://fakestoreapi.com/products&quot;);
       
    },[]);

    function handleCategoryChange(e){
        if(e.target.value=="all") {
             LoadProducts("http://fakestoreapi.com/products&quot;);
        } else {
            LoadProducts(`http://fakestoreapi.com/products/category/${e.target.value}`);
        }
    }
   

    function handleAddClick(e){
        axios.get(`http://fakestoreapi.com/products/${e.target.name}`)
        .then(response => {
            cartItems.push(response.data);
            alert(`${response.data.title}\nAdded To Cart`);
            setCartCount(cartItems.length);
        })
    }
    function handleCartClick(){
        setToggleTable({display: (toggleTable.display==="none")?"block":"none"});
    }

    return(
        <div className="container-fluid">
            <header className="d-flex bg-dark text-white justify-content-between p-3">
                <div className="h3">Fakestore.</div>
                <div className="fs-4">
                    <span className="me-4"><a>Home</a></span>
                    <span className="me-4"><a>Jewelery</a></span>
                    <span className="me-4"><a>Electronics</a></span>
                </div>
                <div className="fs-4">
                    <button onClick={handleCartClick} className="bi btn btn-light bi-cart4 position-relative">
                     <span className="badge position-absolute rounded rounded-circle bg-danger text-white">{cartCount}</span>
                    </button>
                </div>
            </header>
            <section className="mt-3 row">
                <nav className="col-2">
                  <div className="mt-4">
                    <label className="fw-bold form-label">Select Category</label>
                    <div>
                        <select onChange={handleCategoryChange} className="form-select">
                            {
                                categories.map(category=>
                                    <option value={category} key={category}> {category.toUpperCase()} </option>
                                    )
                            }
                        </select>
                    </div>
                  </div>
                  <div>
                    <table style={toggleTable} className="table table-hover caption-top">
                        <caption>Your Cart Items</caption>
                        <thead>
                            <tr>
                                <th>Title</th>
                                <th>Price</th>
                                <th>Preview</th>
                            </tr>
                        </thead>
                        <tbody>
                            {
                                cartItems.map(item=>
                                    <tr key={item.id}>
                                        <td>{item.title}</td>
                                        <td>{item.price}</td>
                                        <td><img width="50" src={item.image} height="50"/></td>
                                    </tr>
                                    )
                            }
                        </tbody>
                    </table>
                  </div>
                </nav>
                <main className="col-10 overflow-auto" style={{height:'500px' , display:'flex', flexWrap:'wrap'}}>
                    {
                        products.map(product=>
                             <div className="card p-2 m-2" key={product.id} style={{width:'200px'}}>
                                <img src={product.image} className="card-img-top" height="120" />
                                <div className="card-header" style={{height:'120px'}}>
                                    <p>
                                        {product.title}
                                    </p>
                                </div>
                                <div className="card-body">
                                    <dl>
                                        <dt>Price</dt>
                                        <dd>{product.price}</dd>
                                        <dt>Rating</dt>
                                        <dd>
                                            {product.rating.rate} <span className="bi bi-star-fill text-success"></span>
                                        </dd>
                                    </dl>
                                </div>
                                <div className="card-footer">
                                    <button name={product.id} onClick={handleAddClick} className="btn btn-dark w-100 bi bi-cart3"> Add to Cart</button>
                                </div>
                             </div>
                            )
                    }
                </main>
            </section>
        </div>
    )
}


                           CRUD Operations on API

C    - Create            POST
R    - Read            GET
U    - Update            PUT
D     - Delete            DELETE

- CRUD operations are handled on the data source provided by API.
- API must provide the request methods to handle all CRUD operations.
- You can manage the data temporarily using various techniques.

Ex:
import { useEffect, useState } from "react"


export function InmemoryCRUD()
{
    const [products, setProducts] = useState([{Id:1, Name: 'TV'}, {Id:2, Name: 'Mobile'}]);
    const [newProduct, setNewProduct] = useState({Id:0, Name: ''});
   
    function handleIdChange(e){
        setNewProduct({
            Id: parseInt(e.target.value),
            Name: newProduct.Name
        })
    }
    function handleNameChange(e){
        setNewProduct({
            Id: newProduct.Id,
            Name: e.target.value
        })
    }

    function handleAddClick(){
        products.push(newProduct);
        setProducts(products.filter(product => product.Id !==0));
        alert(`Product Successfully Added..`);
    }

    function handleDeleteClick(id){
            setProducts(products.filter(product => product.Id !== id));
            alert('Record Deleted');
    }

    return(
        <div className="container-fluid">
            <h2>Testing CRUD</h2>
            <div>
                <label className="fw-bold">Add New Product</label>
                <div>
                    <dl>
                        <dt>Product Id</dt>
                        <dd><input type="number" onChange={handleIdChange} /></dd>
                        <dt>Name</dt>
                        <dd><input type="text" onChange={handleNameChange} /></dd>
                    </dl>
                    <button onClick={handleAddClick}>Add Product</button>
                </div>
            </div>
            <table className="table table-hover">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {
                        products.map(product=>
                            <tr key={product.Id}>
                              <td>{product.Name}</td>
                              <td>
                                <button className="bi bi-pen-fill me-2 btn btn-warning"></button>
                                <button onClick={ ()=> { handleDeleteClick(product.Id) }} className="bi bi-trash btn btn-danger"></button>
                              </td>
                            </tr>
                            )
                    }
                </tbody>
            </table>
        </div>
    )
}
                        React Forms