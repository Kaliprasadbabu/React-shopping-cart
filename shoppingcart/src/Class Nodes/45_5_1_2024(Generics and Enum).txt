5_1_2024(Generics and Enum)

TypeScript Templates

- A template comprises of pre-defined data and logic, which you can implement and customized according to requirements.
- Templates are mostly used in rollouts.
- A template is configured as "abstract" class.
- An abstract class comprises of methods and properties implemented with functionality and marked for implementation.
- You can mark using "abstract".

            abstract  PropertyName:type;
            abstract  MethodName():type | void;

- Abstract members are implemented in extended class.
- An abstract class hides the structure and provides only functionality for implementation, which is known as "Abstraction".
- If a class is having at least one abstract member then it must be marked as abstract.

Ex:
interface ProductContract
{
    Name:string;
    Price:number;
    Qty:number;
    Total():number;
    Print():void;
}
abstract class ProductTemplate implements ProductContract
{
        public Name: string = "";
        public Price: number = 0;
        public Qty: number = 0;
        abstract Total():number;
        abstract Print():void;
}
class ProductComponent extends ProductTemplate
{
    Name = "Samsung TV";
    Price = 46000.44;
    Qty = 2;
    Total(){
        return this.Qty * this.Price;
    }
    Print(){
        console.log(`Name=${this.Name}\nPrice=${this.Price}\nQty=${this.Qty}\nTotal=${this.Total()}`);
    }
}
let obj = new ProductComponent();
obj.Print();

                                Generics

- Generic refers to "Type Safe".
- A type safe component allows any type of data and also restricts to specific type once initialized with data type.
- You can use generic type for
        a) function
        b) method
        c) parameter
        d) property
        e) class
Ex:
interface IProduct
{
    Name:string;
    Price:number;
}

function Print<T>(data:T):T
{
    return data;
}
console.log(Print<string>("Welcome"));
console.log(Print<number>(20));
console.log(Print<IProduct>({Name: "TV", Price: 34000.44}));
console.log(Print<string[]>(["A", "B", "C"]));

- You can't use operators on generic types, every functionality you must handle using methods or functions.

Ex:
function Sum(a:any, b:any) {
    return a + b;
}

function AddNumbers<T>(a:T, b:T)
{
    return Sum(a,b);
}

console.log(AddNumbers<number>(30, 40));


Ex:
interface IOracle
{
    UserId:string;
    Password:string;
    Database:string;
}
interface IMongoDb
{
    Url:string;
}
interface IMySql
{
    User:string;
    Pwd:string;
    DbName:string;
}

class Database<T>
{
     constructor(database:T){
         for(var property in database){
             console.log(`${property} : ${database[property]}`);
         }
     }
}

console.log("-----Connecting with Oracle------");
let ora = new Database<IOracle>({UserId:"scott", Password:"tiger", Database:"ProductsDb"});
console.log("-----Connecting with MongoDb------");
let mongoClient = new Database<IMongoDb>({Url:"mongodb://127.0.0.1:27017"});

Ex:
interface IOracle
{
    UserId:string;
    Password:string;
    Database:string;
}
interface IMongoDb
{
    Url:string;
}
interface IMySql
{
    User:string;
    Pwd:string;
    DbName:string;
}

class Database
{
    public Connect<T>(connectionString:T) {
        for(var property in connectionString){
            console.log(`${property} : ${connectionString[property]}`);
        }
    }    
}

let ora = new Database();
ora.Connect<IOracle>({UserId:"scott", Password:"tiger", Database:"EmpDb"});

Ex:
interface IOracle
{
    UserId:string;
    Password:string;
    Database:string;
}
interface IMongoDb
{
    Url:string;
}
interface IMySql
{
    User:string;
    Pwd:string;
    DbName:string;
}

class Database<T>
{
   public ConnectionString:T|null = null;
}

let ora = new Database<IOracle>();
ora.ConnectionString = {UserId: "scott", Password: "tiger", Database: "empdb"};

console.log(ora.ConnectionString);

                       
                             Enum
                           [Enumeration]

- Enum is a set of constants.
- If you configure Enum with numeric constants, then they have auto implementation for values based on existing values.

Syntax:
        enum  Name
        {
          Key = value,
        }

Ex:
enum ErrorCodes
{
     Redirect = 302,
     NotFound = 404,
     ServerTimeOut,
}
console.log(`${ErrorCodes.NotFound} : ${ErrorCodes[404]}`);

- Enum can handle number, string or expression.
- Expression must return a number or string.
- It will not allow boolean expression.

Ex:

enum ErrorCodes
{
    A = 10,
    B = 20,
    C = A + B
}
console.log(`Addition=${ErrorCodes.C}`);

FAQ: What is reverse-mapping?
Ans : Accessing a key with reference of value.

        EnumName[value]        = > Key
        EnumName.Key        => Value