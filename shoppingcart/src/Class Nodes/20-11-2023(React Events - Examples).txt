React Events - Examples
Summary
- Event
- Event Handler
- Event Args
- SyntheticEvent
- StopPropagation
- PreventDefault

                    Various SyntheticEvents in React
                    ---------------------------------------------

1. Synthetic Mouse Events

    onMouseOver
    onMouseOut
    onMouseUp
    onMouseDown
    onMouseMove

Ex:
mouse-event.css

nav img {
    border:none;
}
nav img:hover {
    border:2px solid blue;
}
main img:hover {
    transform: scale(1.5);
    transition: 2s;
}
main img {
    transform: scale(1);
    transition: 2s;
}

mouse-event.jsx

import { useState } from "react";
import './mouse-event.css';

export function MouseEvent(){

    const [images] = useState(["m1.jpg", "m2.jpg", "m3.jpg", "m4.jpg"]);
    const [preview, setPreview] = useState('m1.jpg');

    function handleMouseOver(e){
        setPreview(e.target.src);
    }

    return(
        <div className="container-fluid">
            <section className="mt-4 row">
                <nav className="col-2">
                   {
                     images.map(imagePath=>
                        <div className="mb-4 p-2" style={{width:'120px'}}>
                            <img style={{cursor:'grab'}} onMouseOver={handleMouseOver} src={imagePath} width="100" height="100" />
                        </div>
                        )
                   }
                </nav>
                <main className="col-10">
                   <div style={{height:'400px', width:'400px', overflow:'hidden'}}>
                    <img src={preview} width="400" height="400" />
                   </div>
                </main>
            </section>
        </div>
    )
}

Ex: Mouse Move

mouse-move.jsx

import { useState } from "react"


export function MouseMove(){


    const [styleObject, setStyleObject] = useState({position:'', top:'', left:''});

    function handleMousemove(e){
        setStyleObject({
            position: 'fixed',
            top: e.clientY + 'px',
            left: e.clientX + 'px'
        })
    }

     return(
        <div onMouseMove={handleMousemove}>
            <div style={{height:'1000px'}}>
            <h1>Mouse mouse pointer to test</h1>
            </div>
            <img src="flag.gif" style={styleObject}  width="50" height="50"/>
        </div>
     )
}


2. Synthetic Keyboard Events

    onKeyUp
    onKeyDown                        JOHN
    onKeyPress

    KeyEvent Properties
    - keyCode
    - charCode
    - which
    - shiftKey
    - ctrlKey
    - altKey    
                   
Ex:
import { useState } from "react"

export function KeyDemo(){

    const [users] = useState([{UserId:'john'}, {UserId:'john12'}, {UserId:'john_nit'}]);
    const [userError, setUserError] = useState('');
    const [isUserValid, setIsUserValid] = useState(false);
    const [capsWarning, setCapsWarning] = useState({display:'none'});

    function VerifyUserId(e){
        for(var user of users){
            if(user.UserId===e.target.value){
                setUserError('User Id Taken - Try Another');
                setIsUserValid(false);
                break;
            } else {
                setUserError('User Id Available');
                setIsUserValid(true);
            }
        }
    }


    function VerifyCaps(e){
        if(e.which>=65 && e.which<=90){
            setCapsWarning({display: 'block'});
        } else {
            setCapsWarning({display:'none'});
        }
    }

    return(
        <div className="container-fluid">
            <h2>Register User</h2>
            <dl>
                <dt>UserId</dt>
                <dd><input type="text" onKeyUp={VerifyUserId} /></dd>
                <dd className={(isUserValid)?'text-success':'text-danger'}>{userError}</dd>
                <dt>Password</dt>
                <dd>
                    <input type="password" onKeyPress={VerifyCaps} />
                </dd>
                <dd className="text-warning" style={capsWarning}>
                    <div className="bi bi-exclamation-triangle"> Warning - CAPS ON</div>
                </dd>
            </dl>
        </div>
    )
}

Task: For Password Display Password strength  strong, weak, poor.
     
Condition:

  If password is 4 to 15 chars alpha numeric with atleast one uppercase letter : strong
  If password is 4 to 15 chars alpha numeric without uppercase letter : weak
  if password is < 4 chars : poor

  You can show strength using <meter>

   Write Regular Expression :   4 to 15 chars with atleat 1 uppercase letter
   value.match()  string function.

    if(value.match(regExp)) {

      }